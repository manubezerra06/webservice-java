package br.edu.qi.webserver.soap.service;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.jws.WebService;

import br.edu.qi.core.dao.Dao;
import br.edu.qi.core.model.Adocao;
import br.edu.qi.core.model.Instituicao;
import br.edu.qi.core.model.Pessoa;

@WebService(endpointInterface = "br.edu.qi.webserver.soap.service.IPessoaService")
public class PessoaService implements IPessoaService {

	private List<Adocao> retornarAdocoesPorData(int mes, int ano)
	{
		
		Dao dao = new Dao();

		List<Adocao> adocoes = dao.retornarTodos("Adocao");
		List<Adocao> adocoesDoMes = new ArrayList<>();

		//pega só as adocoes do mes
		for (Adocao adocao : adocoes) {
			Date dataAdocao = adocao.getDate();

			Calendar cal = Calendar.getInstance();
			cal.setTime(dataAdocao);
			int mesAdocao = cal.get(Calendar.MONTH);
			int anoAdocao = cal.get(Calendar.YEAR);

			if (anoAdocao == ano && mesAdocao == mes) {
				adocoesDoMes.add(adocao);
			}
		}

		return adocoesDoMes;
		
	}
	
	public void getPessoaComMaisAdocao(int mes, int ano) {

		
		List<Adocao> adocoes = retornarAdocoesPorData(mes, ano);
		HashMap<Instituicao, List<Adocao>> adocaoPorInstituicao = agruprarAdocoes(adocoes);
		
		
		
		for (List<Adocao> adocoesPorI : adocaoPorInstituicao.values()) {
			
			
			
			
			//agrupa por instituicao
			HashMap<Pessoa, List<Adocao>> adocaoPorPessoa = new HashMap<>();
			for (Adocao adocao : adocoesPorI) {

				Pessoa pessoa = adocao.getPessoa();

				if (!adocaoPorPessoa.containsKey(pessoa)) {
					List<Adocao> list = new ArrayList<>();
					list.add(adocao);

					adocaoPorPessoa.put(pessoa, list);
				} else {
					adocaoPorPessoa.get(pessoa).add(adocao);
				}
			}
			
			pessoaRetorno = new PessoaRetorno();
			
			pessoaRetorno.setNomeInstituicao(adocoesPorI.get(0).getInstituicao().getNome());
			pessoaRetorno.set
			
			
			
			
		}
		
		for (Pessoa pessoa : pessoas) {

			if (pessoa.getAdocoes().size() >= 2) {

				/*
				 * 
				 * Um Web service que retorne todos as pessoas que tem mais
				 * adoções no
				 * 
				 * mês, por instituição. Retornar no formato adequado ao SOAP. O
				 * Web
				 * 
				 * service recebe como parâmetro mês/ano. (retornar somente os
				 * que tem
				 * 
				 * mais de duas adoções)
				 */

			}
		}

	}

	private HashMap<Instituicao, List<Adocao>> agruprarAdocoes(List<Adocao> adocoes) {

		//agrupa por instituicao
		HashMap<Instituicao, List<Adocao>> adocaoPorInstituicao = new HashMap<>();
		for (Adocao adocao : adocoes) {

			Instituicao instituicao = adocao.getInstituicao();

			if (!adocaoPorInstituicao.containsKey(instituicao)) {
				List<Adocao> list = new ArrayList<>();
				list.add(adocao);

				adocaoPorInstituicao.put(instituicao, list);
			} else {
				adocaoPorInstituicao.get(instituicao).add(adocao);
			}
		}

		return adocaoPorInstituicao;
	
	}

}
