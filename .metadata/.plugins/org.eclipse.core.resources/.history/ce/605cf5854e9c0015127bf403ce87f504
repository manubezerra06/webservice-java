package br.edu.qi.loader;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import br.edu.qi.core.dao.Dao;
import br.edu.qi.dto.RetornoDto;

public class ConsultaXpath extends JFrame {

	private static final long serialVersionUID = 1L;
	private JTextArea text;

	public ConsultaXpath() {
		super("Consulta por XPath");

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(350, 350);
		GridLayout grid = new GridLayout(5, 3, 10, 10);
		setLayout(grid);

		text = new JTextArea();
		JButton btn = new JButton("buscar animal por nome");
		btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				filtrarPorNome();
			}
		});
		add(btn);

		btn = new JButton("buscar animal por tipo");

		btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				filtrarPorTipo();
			}
		});
		add(btn);

		btn = new JButton("buscar animal por instituicao");

		btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				filtrarPorInstituicao();
			}
		});
		add(btn);

		btn = new JButton("cadastrar xml no banco");

		btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				try {
					Dao dao = new Dao();

					Loader loader = new Loader();

					for (int i = 1; i <= 3; i++) {
						RetornoDto model = loader.Load("src/loadtest0" + i + ".xml");

						dao.beginTransaction();

						Parser parser = new Parser(dao);
						parser.parse(model);

						dao.commit();

					}
					text.setText("cadastrado com sucesso");

				} catch (Exception ex) {
					text.setText("deu erro");

				}
			}
		});
		add(btn);

		text.setText("Result");
		text.setEditable(false);
		add(text);

		setVisible(true);

	}

	void filtrarPorInstituicao() {

		text.setText("filtrou por instituicao");
	}

	void filtrarPorTipo() {
		// Expressão XPath
		String expression = "/bookstore/book/title";

		// Caminho fisico do arquivo XML
		String xmlPath = "d:/bookstore.xml";

		// @Document: Interface que representa o documento XML
		org.w3c.dom.Document doc;
		// @DocumentBuilder: Utilizada para construir um @Document do arquivo
		// XML em questão
		DocumentBuilder builder;
		// @DocumentBuilderFactory: Cria uma nova instância de um
		// @DocumentBuilder
		DocumentBuilderFactory domBuilder = DocumentBuilderFactory.newInstance();
		// @XPath: Interface que fornece o acesso ao ambiente e expressões XPath
		XPath xpath;

		try {
			// Constroi os objetos @DocumentBuilder e @Document
			builder = domBuilder.newDocumentBuilder();
			doc = builder.parse(xmlPath);
			// @XPathFactory usada para criar criar os objetos @XPath
			xpath = XPathFactory.newInstance().newXPath();

			// @XPathExpression Interface que fornece acesso às expressões XPath
			// compiladas.
			javax.xml.xpath.XPathExpression expr = xpath.compile(expression);
			/*
			 * O método "evaluate" avalia a expressão XPath compilada e retorna
			 * o resultado              * como o tipo especificado, neste caso
			 * foi especificado NODESET, ou seja um              * conjuto de
			 * NODES  
			 */
			Object result = expr.evaluate(doc, XPathConstants.NODESET);
			NodeList nodes = (NodeList) result;

			// Iteração da lista de NODES
			for (int i = 0; i < nodes.getLength(); i++) {
				// Retorna o texto do NODE "Title
				System.out.println(nodes.item(i).getTextContent());
			}
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();

		}

		text.setText("filtrou por tipo");
	}

	void filtrarPorNome() {

		text.setText("filtrou por nome");
	}
}
